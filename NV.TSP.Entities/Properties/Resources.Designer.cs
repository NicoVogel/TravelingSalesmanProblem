//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TSP.Entities.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("TSP.Entities.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To save a map at least one line must be in the map.
        /// </summary>
        internal static string ExConvertMapToIndexList {
            get {
                return ResourceManager.GetString("ExConvertMapToIndexList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This is a Tsp Exception and someting went wrong..
        /// </summary>
        internal static string ExDefaultMessage {
            get {
                return ResourceManager.GetString("ExDefaultMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The structure of the lines is incorrect. Every point must have two related lines.\nThe point &apos;index:{0}, X:{1}, Y:{2}&apos; in the generation:{3} does have {4} related lines.
        /// </summary>
        internal static string ExMapLinesStructureError {
            get {
                return ResourceManager.GetString("ExMapLinesStructureError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read map age has a non numeric string as value. The map with the index &apos;{0}&apos; has the following wrong text: &apos;{1}&apos;.
        /// </summary>
        internal static string ExReadMapAgeNoNumberError {
            get {
                return ResourceManager.GetString("ExReadMapAgeNoNumberError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read map has the wrong structure. It is supposed to have two parts seperated by &apos;{0}&apos;. The wrong index is &apos;{1}&apos; with the message:\n{2}.
        /// </summary>
        internal static string ExReadMapAgeSturctureError {
            get {
                return ResourceManager.GetString("ExReadMapAgeSturctureError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read map point with the index &apos;{0}&apos; does not exist in the list of points. The index of the map is &apos;{1}&apos; and the indices are: {2}.
        /// </summary>
        internal static string ExReadMapFirstIndexDoesNotExist {
            get {
                return ResourceManager.GetString("ExReadMapFirstIndexDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read map indices has a non numeric string as value. This error is located in the map with the index &apos;{0}&apos; at the read index with the index of &apos;{1}&apos; and the wrong text is &apos;{2}&apos;.
        /// </summary>
        internal static string ExReadMapIndiceNoNumberError {
            get {
                return ResourceManager.GetString("ExReadMapIndiceNoNumberError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read map has no not enougth indices of points. There need to be at least 2 indices. The index of the map is &apos;{0}&apos; and the text is &apos;{1}&apos;.
        /// </summary>
        internal static string ExReadMapIndicesEmpty {
            get {
                return ResourceManager.GetString("ExReadMapIndicesEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read map point with the index &apos;{0}&apos; does not exits in the map indices list. The wrong index of the point in the map index list is &apos;{1}&apos; and the index of the map is &apos;{2}&apos;. The indices of the map are: {3}.
        /// </summary>
        internal static string ExReadMapPointIndexNotFound {
            get {
                return ResourceManager.GetString("ExReadMapPointIndexNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read map has an empty string, but it need values to create a map or log. The index is &apos;{0}&apos;.
        /// </summary>
        internal static string ExReadMapStringEmpty {
            get {
                return ResourceManager.GetString("ExReadMapStringEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read point has a non number string as {0} coordinate. The point with the index &apos;{1}&apos; has the following wrong text: &apos;{2}&apos;.
        /// </summary>
        internal static string ExReadPointNoNumber {
            get {
                return ResourceManager.GetString("ExReadPointNoNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read point has an empty string, but it need two values to create a point. The index is &apos;{0}&apos;.
        /// </summary>
        internal static string ExReadPointStringEmpty {
            get {
                return ResourceManager.GetString("ExReadPointStringEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The read point has the wrong structure. The point with the index &apos;{0}&apos; should have 2 parts, but it doesen&apos;t. This is the text: &apos;{1}&apos;.
        /// </summary>
        internal static string ExReadPointStructureError {
            get {
                return ResourceManager.GetString("ExReadPointStructureError", resourceCulture);
            }
        }
    }
}
